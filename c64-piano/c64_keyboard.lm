// =====================================================================================
// legge la tastiera fisica del C64
// input: 
//     riga: il bit mask con le righe da leggere: ~(1<<riga)
// ritorna:
//     riga: bit mask con i tasti premuti nella riga (0=premuto, 1=rilasciato)
// =====================================================================================

riga: byte 

sub read_c64_keyboard()   
   /*
   ld $dc03, #0    ; sets CIA1 port b ddr to input   (keyboard row bit mask)
   ld $dc02, #$ff  ; sets CIA1 port a ddr to output  (keyboard row)
   */
   lda riga
   sta $dc00	    ; query keyboard row on CIA1 port a 
   lda $dc01       ; retrieve the keyboard row from CIA 1 port b
   sta riga    
end sub

// =====================================================================================
// legge la tastiera fisica del C64
// input: 
//     A: il bit mask con le righe da leggere: ~(1<<riga)
// ritorna:
//     A: bit mask con i tasti premuti nella riga (0=premuto, 1=rilasciato)
// =====================================================================================

sub read_c64_simple()   
   sta $dc00	    ; query keyboard row on CIA1 port a 
   lda $dc01       ; retrieve the keyboard row from CIA 1 port b      
end sub

// =====================================================================================
// emula la tastiera SIEL con la tastiera del C64
// scrive i tasti decodificati in curr_key_status
// =====================================================================================

/*
+----+----------------------+-------------------------------------------------------------------------------------------------------+
|    |                      |                                Peek from $dc01 (code in paranthesis):                                 |
|row:| $dc00:               +------------+------------+------------+------------+------------+------------+------------+------------+
|    |                      |   BIT 7    |   BIT 6    |   BIT 5    |   BIT 4    |   BIT 3    |   BIT 2    |   BIT 1    |   BIT 0    |
+----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+
|1.  | #%11111110 (254/$fe) | DOWN  ($  )|   F5  ($  )|   F3  ($  )|   F1  ($  )|   F7  ($  )| RIGHT ($  )| RETURN($  )|DELETE ($  )|
|2.  | #%11111101 (253/$fd) |LEFT-SH($  )|   e   ($05)|   s   ($13)|   z   ($1a)|   4   ($34)|   a   ($01)|   w   ($17)|   3   ($33)|
|3.  | #%11111011 (251/$fb) |   x   ($18)|   t   ($14)|   f   ($06)|   c   ($03)|   6   ($36)|   d   ($04)|   r   ($12)|   5   ($35)|
|4.  | #%11110111 (247/$f7) |   v   ($16)|   u   ($15)|   h   ($08)|   b   ($02)|   8   ($38)|   g   ($07)|   y   ($19)|   7   ($37)|
|5.  | #%11101111 (239/$ef) |   n   ($0e)|   o   ($0f)|   k   ($0b)|   m   ($0d)|   0   ($30)|   j   ($0a)|   i   ($09)|   9   ($39)|
|6.  | #%11011111 (223/$df) |   ,   ($2c)|   @   ($00)|   :   ($3a)|   .   ($2e)|   -   ($2d)|   l   ($0c)|   p   ($10)|   +   ($2b)|
|7.  | #%10111111 (191/$bf) |   /   ($2f)|   ^   ($1e)|   =   ($3d)|RGHT-SH($  )|  HOME ($  )|   ;   ($3b)|   *   ($2a)|   Â£   ($1c)|
|8.  | #%01111111 (127/$7f) | STOP  ($  )|   q   ($11)|COMMODR($  )| SPACE ($20)|   2   ($32)|CONTROL($  )|  <-   ($1f)|   1   ($31)|
+----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+
*/

const KEYBOARD_ROW_0 = %11111110
const KEYBOARD_ROW_1 = %11111101
const KEYBOARD_ROW_2 = %11111011
const KEYBOARD_ROW_3 = %11110111
const KEYBOARD_ROW_4 = %11101111
const KEYBOARD_ROW_5 = %11011111
const KEYBOARD_ROW_6 = %10111111
const KEYBOARD_ROW_7 = %01111111
              
const KEY_STOP     = %01111111  ; row 0 
const KEY_SLASH    = %01111111  ; row 1
const KEY_COMMA    = %01111111  ; row 2
const KEY_N        = %01111111  ; row 3
const KEY_V        = %01111111  ; row 4
const KEY_X        = %01111111  ; row 5
const KEY_LSHIFT   = %01111111  ; row 6
const KEY_DOWN     = %01111111  ; row 7

const KEY_F5       = %10111111  ; row 0
const KEY_E        = %10111111  ; row 1
const KEY_T        = %10111111  ; row 2
const KEY_U        = %10111111  ; row 3
const KEY_O        = %10111111  ; row 4
const KEY_AT       = %10111111  ; row 5
const KEY_POW      = %10111111  ; row 6
const KEY_Q        = %10111111  ; row 7

const KEY_F3       = %11011111  ; row 0
const KEY_S        = %11011111  ; row 1
const KEY_F        = %11011111  ; row 2
const KEY_H        = %11011111  ; row 3
const KEY_K        = %11011111  ; row 4
const KEY_COLON    = %11011111  ; row 5
const KEY_EQUAL    = %11011111  ; row 6
const KEY_CBM      = %11011111  ; row 7

const KEY_F1       = %11101111  ; row 0
const KEY_Z        = %11101111  ; row 1
const KEY_C        = %11101111  ; row 2
const KEY_B        = %11101111  ; row 3
const KEY_M        = %11101111  ; row 4
const KEY_DOT      = %11101111  ; row 5
const KEY_RSHIFT   = %11101111  ; row 6
const KEY_SPACE    = %11101111  ; row 7

const KEY_F7       = %11110111  ; row 0
const KEY_4        = %11110111  ; row 1
const KEY_6        = %11110111  ; row 2
const KEY_8        = %11110111  ; row 3
const KEY_0        = %11110111  ; row 4
const KEY_MINUS    = %11110111  ; row 5
const KEY_HOME     = %11110111  ; row 6
const KEY_2        = %11110111  ; row 7

const KEY_RIGHT    = %11111011  ; row 0
const KEY_A        = %11111011  ; row 1
const KEY_D        = %11111011  ; row 2
const KEY_G        = %11111011  ; row 3
const KEY_J        = %11111011  ; row 4
const KEY_L        = %11111011  ; row 5
const KEY_SCOLON   = %11111011  ; row 6
const KEY_CONTROL  = %11111011  ; row 7

const KEY_RETURN   = %11111101  ; row 0
const KEY_W        = %11111101  ; row 1
const KEY_R        = %11111101  ; row 2
const KEY_Y        = %11111101  ; row 3
const KEY_I        = %11111101  ; row 4
const KEY_P        = %11111101  ; row 5
const KEY_ASTERISK = %11111101  ; row 6
const KEY_ESCAPE   = %11111101  ; row 7

const KEY_DELETE   = %11111110  ; row 0
const KEY_3        = %11111110  ; row 1
const KEY_5        = %11111110  ; row 2
const KEY_7        = %11111110  ; row 3
const KEY_9        = %11111110  ; row 4
const KEY_PLUS     = %11111110  ; row 5
const KEY_POUND    = %11111110  ; row 6
const KEY_1        = %11111110  ; row 7

const ROW_KEY_STOP     = %11111110
const ROW_KEY_SLASH    = %11111101
const ROW_KEY_COMMA    = %11111011
const ROW_KEY_N        = %11110111
const ROW_KEY_V        = %11101111
const ROW_KEY_X        = %11011111
const ROW_KEY_LSHIFT   = %10111111
const ROW_KEY_DOWN     = %01111111

const ROW_KEY_F5       = %11111110
const ROW_KEY_E        = %11111101
const ROW_KEY_T        = %11111011
const ROW_KEY_U        = %11110111
const ROW_KEY_O        = %11101111
const ROW_KEY_AT       = %11011111
const ROW_KEY_POW      = %10111111
const ROW_KEY_Q        = %01111111

const ROW_KEY_F3       = %11111110
const ROW_KEY_S        = %11111101
const ROW_KEY_F        = %11111011
const ROW_KEY_H        = %11110111
const ROW_KEY_K        = %11101111
const ROW_KEY_COLON    = %11011111
const ROW_KEY_EQUAL    = %10111111
const ROW_KEY_CBM      = %01111111

const ROW_KEY_F1       = %11111110
const ROW_KEY_Z        = %11111101
const ROW_KEY_C        = %11111011
const ROW_KEY_B        = %11110111
const ROW_KEY_M        = %11101111
const ROW_KEY_DOT      = %11011111
const ROW_KEY_RSHIFT   = %10111111
const ROW_KEY_SPACE    = %01111111

const ROW_KEY_F7       = %11111110
const ROW_KEY_4        = %11111101
const ROW_KEY_6        = %11111011
const ROW_KEY_8        = %11110111
const ROW_KEY_0        = %11101111
const ROW_KEY_MINUS    = %11011111
const ROW_KEY_HOME     = %10111111
const ROW_KEY_2        = %01111111

const ROW_KEY_RIGHT    = %11111110
const ROW_KEY_A        = %11111101
const ROW_KEY_D        = %11111011
const ROW_KEY_G        = %11110111
const ROW_KEY_J        = %11101111
const ROW_KEY_L        = %11011111
const ROW_KEY_SCOLON   = %10111111
const ROW_KEY_CONTROL  = %01111111

const ROW_KEY_RETURN   = %11111110
const ROW_KEY_W        = %11111101
const ROW_KEY_R        = %11111011
const ROW_KEY_Y        = %11110111
const ROW_KEY_I        = %11101111
const ROW_KEY_P        = %11011111
const ROW_KEY_ASTERISK = %10111111
const ROW_KEY_ESCAPE   = %01111111

const ROW_KEY_DELETE   = %11111110
const ROW_KEY_3        = %11111101
const ROW_KEY_5        = %11111011
const ROW_KEY_7        = %11110111
const ROW_KEY_9        = %11101111
const ROW_KEY_PLUS     = %11011111
const ROW_KEY_POUND    = %10111111
const ROW_KEY_1        = %01111111

sub simulate_siel()
   ; fila superiore
   simk #KEYBOARD_ROW_7, #KEY_Q, curr_key_status+12
   simk #KEYBOARD_ROW_7, #KEY_2, curr_key_status+13
   simk #KEYBOARD_ROW_1, #KEY_W, curr_key_status+14
   simk #KEYBOARD_ROW_1, #KEY_3, curr_key_status+15
   simk #KEYBOARD_ROW_1, #KEY_E, curr_key_status+16
   simk #KEYBOARD_ROW_2, #KEY_R, curr_key_status+17
   simk #KEYBOARD_ROW_2, #KEY_5, curr_key_status+18
   simk #KEYBOARD_ROW_2, #KEY_T, curr_key_status+19
   simk #KEYBOARD_ROW_2, #KEY_6, curr_key_status+20
   simk #KEYBOARD_ROW_3, #KEY_Y, curr_key_status+21
   simk #KEYBOARD_ROW_3, #KEY_7, curr_key_status+22
   simk #KEYBOARD_ROW_3, #KEY_U, curr_key_status+23
   simk #KEYBOARD_ROW_4, #KEY_I, curr_key_status+24
   simk #KEYBOARD_ROW_4, #KEY_9, curr_key_status+25
   simk #KEYBOARD_ROW_4, #KEY_O, curr_key_status+26
   simk #KEYBOARD_ROW_4, #KEY_0, curr_key_status+27
   simk #KEYBOARD_ROW_5, #KEY_P, curr_key_status+28   

   ; fila inferiore
   simk #KEYBOARD_ROW_1, #KEY_Z,     curr_key_status+0
   simk #KEYBOARD_ROW_1, #KEY_S,     curr_key_status+1
   simk #KEYBOARD_ROW_2, #KEY_X,     curr_key_status+2
   simk #KEYBOARD_ROW_2, #KEY_D,     curr_key_status+3
   simk #KEYBOARD_ROW_2, #KEY_C,     curr_key_status+4
   simk #KEYBOARD_ROW_3, #KEY_V,     curr_key_status+5
   simk #KEYBOARD_ROW_3, #KEY_G,     curr_key_status+6
   simk #KEYBOARD_ROW_3, #KEY_B,     curr_key_status+7
   simk #KEYBOARD_ROW_3, #KEY_H,     curr_key_status+8
   simk #KEYBOARD_ROW_4, #KEY_N,     curr_key_status+9
   simk #KEYBOARD_ROW_4, #KEY_J,     curr_key_status+10
   simk #KEYBOARD_ROW_4, #KEY_M,     curr_key_status+11
   
   /*
   simk #KEYBOARD_ROW_5, #KEY_COMMA, curr_key_status+12
   simk #KEYBOARD_ROW_5, #KEY_L,     curr_key_status+13
   simk #KEYBOARD_ROW_5, #KEY_DOT,   curr_key_status+14
   simk #KEYBOARD_ROW_5, #KEY_COLON, curr_key_status+15
   simk #KEYBOARD_ROW_6, #KEY_SLASH, curr_key_status+16   
   */
end sub

macro simk const, const, mem
   lda #{1}
   jsr read_c64_simple
   eor #{2}
   if zero then
      ld {3}, #KEY_PRESSED
   else
      ld {3}, #KEY_RELEASED
   end if
end macro

macro is_pressed const, const
   lda #{1}
   sta $dc00	    ; query keyboard row on CIA1 port a 
   lda $dc01       ; retrieve the keyboard row from CIA 1 port b      
   eor #{2}
end macro
