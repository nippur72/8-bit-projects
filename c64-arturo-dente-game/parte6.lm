include "macros_16.lm"
include "macros.lm"
include "c64.lm"

   processor 6502
   org BASIC_RAM

// === variabili usate nel basic ===
// sc   conta linee scroll
// ln$  riga per il disegno della strada
// de   delta pixel di movimento sprite (per accelerazione astronave)
// x,y  coordinate dell'astronave
// hi   numero di collisioni prima del game over
// sp   spazi da anteporre alla riga di strada
// lc   cache del precedente numero random
// rp   contatore ripetizioni fatte di riga

basic start
   10 rem f64
   30 sc=0  
   40 poke646,2:poke53280,2:poke53281,0
   70 rc=7:sp=rc:lc=0:rp=0:dimc
   80 dimob:dimhi
   100 print"{clear}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}"
   110 v=53248                               // start of display chip

   120 sys {prepara_sprite}

   150 sys {posizione_iniziale}   
   
   160 sys {muove_astronave}

   // disegno della "strada"
   270 gosub 900:c=rn                                  // 1:aumenta spazi, 2:diminuisce spazi, 3:invariato
   280 iflc=0thenifc=0thensp=sp+1:rp=rp+1:goto300
   290 iflc=0thenifc=1thensp=sp-1:rp=rp+1
   300 iflc=1thensp=sp+1:rp=rp+1:goto330               // lc<>0 quindi cache c precedente in corso
   310 iflc=2thensp=sp-1:rp=rp+1:goto330               // aumentando le volte ke ripropongo il trend
   320 iflc=3thenrp=rp+1                               // anche idle aumenta rp
   330 ifsp<rcthensp=rc:goto370
   340 ifsp>2*rcthensp=2*rc

   370 poke {_sp},sp
   371 sys {disegna_strada}

   400 ifpeek(53279)=4thengosub480        // controlla collisione sprite astronave
   410 ifrp>rcthenrp=0:lc=c               // reset condizioni iniziali scrolling
   420 sc=sc+1

   430 goto160

   // collisione atronave
   480 hi=hi+1
   490 poke53289,4+hi
   500 ifhi<11thenreturn

   // fine gioco
   510 print"{clear}"
   520 pokev+21,0
   530 restore
   540 print "fine corsa"
   550 print "linee superate:"+str$(sc):print "ancora?(y o n)"
   560 gety$:ify$=""goto560
   570 ify$="y"thengoto30
   580 end

   // calcola un numero casuale tra 1..3 (estremi compresi)
   900 sys {Random}:rn = (peek({RandomNumber}) and 3) + 1
   901 if rn=4 then 900                     
   910 return

   // calcola un numero casuale tra 1..18 (estremi compresi)
   920 sys {Random}:rn = (peek({RandomNumber}) and 31) + 1
   921 if rn>18 then 920                   // scarta i numeri maggiori di 18
   930 return   

   1000 for t=1 to 10
   1010 sys {Random}
   1020 print peek({RandomNumber})
   1030 next

   2000 sys {scroll_video}
basic end

; =========
; VARIABILI
; =========

joy   byte 0
posx  byte 0
posy  byte 0
delta byte 0

const v = 53248
const spritex = v+4
const spritey = v+5

; =====================================================================
; Name: posizione_iniziale
; Purpose: imposta la posizione iniziale della navicella in posx, posy
; =====================================================================

sub posizione_iniziale()
   ld posx, #165
   ld posy, #50
   ld delta, #3    ; delta pixel di movimento sprite
end sub 

; =====================================================================
; Name: muove_astronave
; Purpose: legge il joystick in porta 2 e muove l'astronave con la
;          relativa accelerazione
; =====================================================================

sub muove_astronave()
   ld joy, 56320    ; legge joystick in porta 2

   ; accelerazione   
   if a<>#127 then
      inc delta 
      if delta > #10 then ld delta, #10      ; non esageriamo      
   else
      dec delta
      if delta <  #3 then ld delta, #3       ; non esageriamo      
   end if   

   ; rem movimenti navicella
   if joy = #126 then sub posy, delta
   if joy = #125 then add posy, delta
   if joy = #123 then sub posx, delta
   if joy = #119 then add posx, delta

   if joy = #122 then 
      sub posy, delta
      sub posx, delta
   end if
   if joy = #118 then 
      sub posy, delta
      add posx, delta
   end if
   if joy = #121 then 
      add posy, delta
      sub posx, delta
   end if
   if joy = #117 then 
      add posy, delta
      add posx, delta
   end if
   
   if posx < #20  then ld posx, #20   ; bordi
   if posx > #255 then ld posx, #255  ; bordi
   if posy < #50  then ld posy, #50   ; bordi
   if posy > #237 then ld posy, #237  ; bordi

   ; aggiorna lo sprite
   ld spritex, posx      ; coordinata x
   ld spritey, posy      ; coordinata y
end sub


; =====================================================================
; Name: prepara_sprite
; Purpose: attiva lo sprite 2 e ne carica la grafica
; =====================================================================

sub prepara_sprite()
   ld v+21, #4        ; enable sprite 2
   ld 53289, #4
   ld 2042, #13       ; sprite 2 data from block 13

   for x=#0 to #62
      lda sprite_data,x
      sta 832,x
   next
end sub  

sprite_data:
   ;      012345670123456701234567
   sprite ........................
   sprite ........................
   sprite ........................          
   sprite ........................
   sprite ........................
   sprite ........................
   sprite ........................
   sprite ........................
   sprite XXXXXXXXXXXXXXXXXXXXXXXX
   sprite .X..X...X......X...X..X.
   sprite ..X..XXX........XXX..X..
   sprite ...X................X...
   sprite ....X......XX......X....
   sprite .....X....X..X....X.....
   sprite ......X...X..X...X......
   sprite .......X..X..X..X.......
   sprite ........X..XX..X........
   sprite .........X....X.........
   sprite ..........X..X..........
   sprite ...........XX...........
   sprite ........................

; =====================================================================
; Name: Random
;
; Purpose: genera un numero random tra 0-255
;
; Returns: A=numero random. Il numero si trova anche nella cella "RandomNumber"
;
; Nota: presa dal forum Denial e adattata per il C64:
;       http://sleepingelephant.com/ipw-web/bulletin/bb/viewtopic.php?f=2&t=7878
;       
;       La sequenza random viene resa ancora più casuale facendo uno XOR
;       con il Timer del C64 (locazione $dc04). Il seme di partenza deve
;       essere un numero diverso da zero (qui è #$01).
;
;       Fa uso di codice auto-modificante (sintassi **RandomNumber($01))
;
; =====================================================================

sub Random()
   lda #**RandomNumber($01)
   asl
   if not carry then eor #$4d
   sta RandomNumber
   eor $dc04
   if not zero then sta RandomNumber
end sub


_sp byte 0

sub disegna_strada()
   jsr scroll_video
   jsr pulisce_ultima_riga
   jsr disegna_marciapiede

   // numero casuale da 0 a 2   
   do
      jsr Random
      and #3
   loop until a<>#3

   if a=#0 then 
      jsr disegna_ostacolo
   end if
end sub

sub disegna_marciapiede()      
   ldx _sp       ;
   lda #102      ;
   sta 1984,x    ; equivale a poke 1984+sp,102
   sta 1984+19,x ; equivale a poke 1984+sp+19,102
end sub

sub pulisce_ultima_riga()   
   lda #32
   ldx #SCREEN_COLS-1
   do 
      sta VIDEO_RAM + 24*SCREEN_COLS,x
      dex
   loop while not negative
end sub

sub disegna_ostacolo()
   // prende un numero causale da 0 a 17
   do
      jsr Random
      and #31
   loop while a > #17
               
   add _sp        ;
   tax            ; x = rnd + _sp

   lda #81         ; carattere pallina
   sta 1984+1,x    ; equivale a poke 1984+sp+ob,81
end sub

sub scroll_video()
   ldx #SCREEN_COLS-1
ripeti:
      lda VIDEO_RAM +  0*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 0*SCREEN_COLS,x
      lda VIDEO_RAM +  1*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 1*SCREEN_COLS,x
      lda VIDEO_RAM +  2*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 2*SCREEN_COLS,x
      lda VIDEO_RAM +  3*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 3*SCREEN_COLS,x
      lda VIDEO_RAM +  4*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 4*SCREEN_COLS,x
      lda VIDEO_RAM +  5*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 5*SCREEN_COLS,x
      lda VIDEO_RAM +  6*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 6*SCREEN_COLS,x
      lda VIDEO_RAM +  7*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 7*SCREEN_COLS,x
      lda VIDEO_RAM +  8*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 8*SCREEN_COLS,x
      lda VIDEO_RAM +  9*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM + 9*SCREEN_COLS,x
      lda VIDEO_RAM + 10*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +10*SCREEN_COLS,x
      lda VIDEO_RAM + 11*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +11*SCREEN_COLS,x
      lda VIDEO_RAM + 12*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +12*SCREEN_COLS,x
      lda VIDEO_RAM + 13*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +13*SCREEN_COLS,x
      lda VIDEO_RAM + 14*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +14*SCREEN_COLS,x
      lda VIDEO_RAM + 15*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +15*SCREEN_COLS,x
      lda VIDEO_RAM + 16*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +16*SCREEN_COLS,x
      lda VIDEO_RAM + 17*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +17*SCREEN_COLS,x
      lda VIDEO_RAM + 18*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +18*SCREEN_COLS,x
      lda VIDEO_RAM + 19*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +19*SCREEN_COLS,x
      lda VIDEO_RAM + 20*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +20*SCREEN_COLS,x
      lda VIDEO_RAM + 21*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +21*SCREEN_COLS,x
      lda VIDEO_RAM + 22*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +22*SCREEN_COLS,x
      lda VIDEO_RAM + 23*SCREEN_COLS + SCREEN_COLS,x : sta VIDEO_RAM +23*SCREEN_COLS,x
      dex
      if negative then exit sub
      jmp ripeti
end sub

